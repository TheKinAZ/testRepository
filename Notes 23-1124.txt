Week 3: Source Control, Arrays and Methods

Java 3: Weekly Curriculum & Videos
1. Source Control with git
Note: that a Mac computer may already have git preinstalled. Before you attempt installing git on a Mac, check to see if it's already there by typing git version in your Terminal window. 

Source Control With git Overview
git is a "distributed version control system designed to handle everything from small to very large projects with speed and efficiency".  (git, Retrieved on 4/12/23 from https://git-scm.com). 

git is used in many software development environments, and provides a number of benefits for any software developer.  It provides a backup of code that you are writing on your local system.  In addition, when working on a project with a team, it provides a way to ensure everyone has the same, up-to-date code. 

git is a Source Control tool used to enable teams to collaborate on projects at the same time. If users make changes to the same file that would overwrite one another, git provides merge conflict messages that enable users to manually adjust the multiple changes so that no one's code is overwritten. git also keeps track of all the changes made to a project by using save-points called commits. 



GitHub is a web-based git GUI that enables us to visually manage our repositories and push our code to a remote location (GitHub servers). 

To start a new project (which we will do each week in this program), we need to create a new directory on our local computer that will contain our project/assignment code and then create a new repository on GitHub. Once we create the repository (or repo) on GitHub, it will give us a list of commands to run on Command Prompt (Windows) from within the directory that we created for our project. The list of commands will allow us to connect the directory on our local computer with the GitHub repo on the GitHub server, and subsequently back-up our programs to the GitHub Server repo.

For example:
1) We create a new local directory for our weekly project using our CLI (Terminal or Command Prompt):  mkdir week3Assignment
2) We log into our GitHub account in a browser of our choice and create a new repository  
NOTE:  The GitHub repo name could be something like week3Assignment, as well.
3) We run the commands that GitHub gives us in our CLI in the directory we made
NOTE:  we have to cd into the new local directory first:   cd week3Assignment

The commands used in Command Prompt (Windows) typically look like this:

echo "# week3assignment" >> README.md

git init

git add README.md

git commit -m "first commit"

git branch -M main

git remote add origin https://github.com/GitUser/week3assignment.git

git push -u origin main


Note: GitUser will be your GitHub account username
Note: instead of running git add README.md we can run git add . to add all files.


Your CLI may prompt you with the following message:

---------------------------------------------------------------------------------------------

Please tell me who you are.

Run

     git config --global user.email You@example.com

     git config --global user.name UserName

---------------------------------------------------------------------------------------------

Note:  If it does, we need to run the suggested commands and replace You@example.com and UserName with the email you used on GitHub and your own UserName.



Personal Access Tokens:

You may also need to create a token. You can do so by following the official guide here:  PersonalAccessTokenLink



After running these commands, our local computer's repository should be connected to the remote repository on GitHub and we can follow a git workflow to keep our code in sync and uploaded to GitHub.



Additionally useful git commands run from Command Prompt (Windows) or Terminal (Mac) are as follow:

git status 
this command gives information on the current status of a directory 
git remote -v  
which shows the GitHub repository to which a directory is connected

As an additional example, here is an overview of a basic git workflow:

1. Pull down any changes so our workspace is up to date using the command git pull in our existing git repository.

2. Make any changes to our code or files.

3. Stage the changes by using git add [files we want to add] or git add . to add all changed/new files.

4. Take a snapshot of those changes (a commit) with git commit -am "commit message" where the commit message is a short note summarizing what changes/additions we made. 

5. Push changes to a remote repo using git push -u origin main 










Uploading Your Assignments to GitHub
Note:  This video talks about uploading a week 1 coding assignment, but we are currently in week 3.  You can practice what the presenter is demonstrating with any assignment.

Uploading Your Assignments to GitHub



Uploading Your Assignments to GitHub
VIDEO NOTES
Source Control With git Overview
-Thumb Drive (not asynchronous)
-Dropbox
 *you're working on an essay
 *someone else starts while you're still working
 *save your changes to DB
 *they save their version after you
 *your changes are overwritten by their changes

-Git
Git workflow:
1) Pulldown changes so your workspace is up to date (so you have the most current version available)
2) Make changes
3) Stage your changes
4) Take a snapshot of changes (commit)
5) Push changes to the remote branch in the cloud
6) Merge that branch into Master branch

Download Git:

echo "# testRepository" >> README.md
  git init
  git add README.md
  git commit -m "first commit"
  git branch -M main
  git remote add origin https://github.com/TheKinAZ/testRepository.git
  git push -u origin main




In CMD, when I run: git commit -m "first commit", it errors "Author identity unknown" with Please tell me who you are with instructions, including to run git config --global user.email "you@example.com" to Omit --global. I cannot... OOOOH NO, I NEEDED TO OMIT THE -- WITH GLOBAL!! Yes, that worked.